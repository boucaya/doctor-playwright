name: Doctor availability monitor

on:
  schedule:
    # every 30 minutes
    - cron: '*/30 * * * *'
  workflow_dispatch: {}

jobs:
  monitor:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # allow pushing back state.json using the automatically-provided GITHUB_TOKEN
          persist-credentials: true

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Add random jitter
        run: |
          # random sleep up to 60s to disperse requests and avoid pattern detection
          SLEEP=$(( RANDOM % 60 ))
          echo "Sleeping ${SLEEP}s to add jitter"
          sleep $SLEEP

      - name: Restore previous state.json from last artifact
        env:
          REPO: ${{ github.repository }}
          TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          echo "Looking for latest checker-artifacts artifact..."
          # List artifacts and find the latest artifact id for 'checker-artifacts'
          ARTIFACT_ID=$(curl -s -H "Authorization: Bearer ${TOKEN}" "https://api.github.com/repos/${REPO}/actions/artifacts?per_page=50" \
            | jq -r '.artifacts[] | select(.name=="checker-artifacts") | .id' | head -n1)
          if [ -n "${ARTIFACT_ID}" ]; then
            echo "Found artifact id ${ARTIFACT_ID}, downloading..."
            curl -s -H "Authorization: Bearer ${TOKEN}" -L "https://api.github.com/repos/${REPO}/actions/artifacts/${ARTIFACT_ID}/zip" -o artifact.zip
            unzip -o artifact.zip -d artifact_prev || true
            if [ -f artifact_prev/artifacts/state.json ]; then
              mkdir -p artifacts
              cp artifact_prev/artifacts/state.json artifacts/state.json
              echo "Restored artifacts/state.json"
            else
              echo "No state.json inside artifact"
            fi
          else
            echo "No previous checker-artifacts artifact found"
          fi

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # ensure Playwright Python package is installed
          pip install playwright
          # install Playwright browsers and system dependencies using the Python entrypoint
          python -m playwright install --with-deps

      - name: Run checker (single-run)
        env:
          # Map secrets to env variables read by src.checker
          EMAIL_FROM: ${{ secrets.EMAIL_FROM }}
          EMAIL_TO: ${{ secrets.EMAIL_TO }}
          SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
          SMTP_PORT: ${{ secrets.SMTP_PORT }}
          EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
          TARGET_DOCTOR: ${{ secrets.TARGET_DOCTOR }}
          MAX_DAYS: ${{ secrets.MAX_DAYS }}
          CHECKER_URL: ${{ secrets.CHECKER_URL }}
          DOCTOR_LAST_NAME: ${{ secrets.DOCTOR_LAST_NAME }}
          PREVISION_VALUE: ${{ secrets.PREVISION_VALUE }}
          SLOT_SELECTOR: ${{ secrets.SLOT_SELECTOR }}
        run: |
          mkdir -p artifacts
          set -euo pipefail
          # Build command and only include --selector if SLOT_SELECTOR is non-empty
          CMD=(python -m src.checker --headless --doctor "${DOCTOR_LAST_NAME}" --output-json --prevision "${PREVISION_VALUE}" --target-doctor "${TARGET_DOCTOR}" --max-days "${MAX_DAYS}")
          if [ -n "${SLOT_SELECTOR:-}" ]; then
            CMD+=(--selector "${SLOT_SELECTOR}")
          fi
          echo "Running: ${CMD[*]}"
          "${CMD[@]}"

      - name: Update state and prepare commit
        env:
          EMAIL_FROM: ${{ secrets.EMAIL_FROM }}
          EMAIL_TO: ${{ secrets.EMAIL_TO }}
          SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
          SMTP_PORT: ${{ secrets.SMTP_PORT }}
          EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
          TARGET_DOCTOR: ${{ secrets.TARGET_DOCTOR }}
          MAX_DAYS: ${{ secrets.MAX_DAYS }}
        run: |
          python tools/update_state_and_notify.py --artifacts ./artifacts --state-file ./artifacts/state.json

      - name: Upload artifacts (state + debug files)
        uses: actions/upload-artifact@v4
        with:
          name: checker-artifacts
          path: |
            ./artifacts/state.json
            ./artifacts/slots_*.json
            ./artifacts/*.html
            ./artifacts/*.png
